// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	vk_restAPI "vk_restAPI"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user vk_restAPI.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// GetUserStatus mocks base method.
func (m *MockAuthorization) GetUserStatus(id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserStatus", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserStatus indicates an expected call of GetUserStatus.
func (mr *MockAuthorizationMockRecorder) GetUserStatus(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStatus", reflect.TypeOf((*MockAuthorization)(nil).GetUserStatus), id)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockActors is a mock of Actors interface.
type MockActors struct {
	ctrl     *gomock.Controller
	recorder *MockActorsMockRecorder
}

// MockActorsMockRecorder is the mock recorder for MockActors.
type MockActorsMockRecorder struct {
	mock *MockActors
}

// NewMockActors creates a new mock instance.
func NewMockActors(ctrl *gomock.Controller) *MockActors {
	mock := &MockActors{ctrl: ctrl}
	mock.recorder = &MockActorsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActors) EXPECT() *MockActorsMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *MockActors) CreateActor(actor vk_restAPI.Actors) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", actor)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockActorsMockRecorder) CreateActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockActors)(nil).CreateActor), actor)
}

// DeleteActor mocks base method.
func (m *MockActors) DeleteActor(actorId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", actorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorsMockRecorder) DeleteActor(actorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActors)(nil).DeleteActor), actorId)
}

// UpdateActor mocks base method.
func (m *MockActors) UpdateActor(actorId int, input vk_restAPI.UpdateActors) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", actorId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorsMockRecorder) UpdateActor(actorId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActors)(nil).UpdateActor), actorId, input)
}

// MockMovies is a mock of Movies interface.
type MockMovies struct {
	ctrl     *gomock.Controller
	recorder *MockMoviesMockRecorder
}

// MockMoviesMockRecorder is the mock recorder for MockMovies.
type MockMoviesMockRecorder struct {
	mock *MockMovies
}

// NewMockMovies creates a new mock instance.
func NewMockMovies(ctrl *gomock.Controller) *MockMovies {
	mock := &MockMovies{ctrl: ctrl}
	mock.recorder = &MockMoviesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovies) EXPECT() *MockMoviesMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockMovies) CreateMovie(userId int, movie vk_restAPI.Movies, actorIDs []int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", userId, movie, actorIDs)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockMoviesMockRecorder) CreateMovie(userId, movie, actorIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovies)(nil).CreateMovie), userId, movie, actorIDs)
}

// DeleteMovie mocks base method.
func (m *MockMovies) DeleteMovie(movieId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", movieId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockMoviesMockRecorder) DeleteMovie(movieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockMovies)(nil).DeleteMovie), movieId)
}

// MockActorsWithMovies is a mock of ActorsWithMovies interface.
type MockActorsWithMovies struct {
	ctrl     *gomock.Controller
	recorder *MockActorsWithMoviesMockRecorder
}

// MockActorsWithMoviesMockRecorder is the mock recorder for MockActorsWithMovies.
type MockActorsWithMoviesMockRecorder struct {
	mock *MockActorsWithMovies
}

// NewMockActorsWithMovies creates a new mock instance.
func NewMockActorsWithMovies(ctrl *gomock.Controller) *MockActorsWithMovies {
	mock := &MockActorsWithMovies{ctrl: ctrl}
	mock.recorder = &MockActorsWithMoviesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorsWithMovies) EXPECT() *MockActorsWithMoviesMockRecorder {
	return m.recorder
}

// GetActorById mocks base method.
func (m *MockActorsWithMovies) GetActorById(actorId int) (vk_restAPI.ActorsWithMovies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorById", actorId)
	ret0, _ := ret[0].(vk_restAPI.ActorsWithMovies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorById indicates an expected call of GetActorById.
func (mr *MockActorsWithMoviesMockRecorder) GetActorById(actorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorById", reflect.TypeOf((*MockActorsWithMovies)(nil).GetActorById), actorId)
}

// GetActors mocks base method.
func (m *MockActorsWithMovies) GetActors() ([]vk_restAPI.ActorsWithMovies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors")
	ret0, _ := ret[0].([]vk_restAPI.ActorsWithMovies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockActorsWithMoviesMockRecorder) GetActors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockActorsWithMovies)(nil).GetActors))
}

// MockMoviesWithActors is a mock of MoviesWithActors interface.
type MockMoviesWithActors struct {
	ctrl     *gomock.Controller
	recorder *MockMoviesWithActorsMockRecorder
}

// MockMoviesWithActorsMockRecorder is the mock recorder for MockMoviesWithActors.
type MockMoviesWithActorsMockRecorder struct {
	mock *MockMoviesWithActors
}

// NewMockMoviesWithActors creates a new mock instance.
func NewMockMoviesWithActors(ctrl *gomock.Controller) *MockMoviesWithActors {
	mock := &MockMoviesWithActors{ctrl: ctrl}
	mock.recorder = &MockMoviesWithActorsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMoviesWithActors) EXPECT() *MockMoviesWithActorsMockRecorder {
	return m.recorder
}

// GetMovieById mocks base method.
func (m *MockMoviesWithActors) GetMovieById(movieId int) (vk_restAPI.MoviesWithActors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieById", movieId)
	ret0, _ := ret[0].(vk_restAPI.MoviesWithActors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieById indicates an expected call of GetMovieById.
func (mr *MockMoviesWithActorsMockRecorder) GetMovieById(movieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieById", reflect.TypeOf((*MockMoviesWithActors)(nil).GetMovieById), movieId)
}

// GetMovies mocks base method.
func (m *MockMoviesWithActors) GetMovies() ([]vk_restAPI.MoviesWithActors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovies")
	ret0, _ := ret[0].([]vk_restAPI.MoviesWithActors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovies indicates an expected call of GetMovies.
func (mr *MockMoviesWithActorsMockRecorder) GetMovies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovies", reflect.TypeOf((*MockMoviesWithActors)(nil).GetMovies))
}

// GetMoviesSortedByDate mocks base method.
func (m *MockMoviesWithActors) GetMoviesSortedByDate() ([]vk_restAPI.MoviesWithActors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoviesSortedByDate")
	ret0, _ := ret[0].([]vk_restAPI.MoviesWithActors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoviesSortedByDate indicates an expected call of GetMoviesSortedByDate.
func (mr *MockMoviesWithActorsMockRecorder) GetMoviesSortedByDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoviesSortedByDate", reflect.TypeOf((*MockMoviesWithActors)(nil).GetMoviesSortedByDate))
}

// GetMoviesSortedByTitle mocks base method.
func (m *MockMoviesWithActors) GetMoviesSortedByTitle() ([]vk_restAPI.MoviesWithActors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoviesSortedByTitle")
	ret0, _ := ret[0].([]vk_restAPI.MoviesWithActors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoviesSortedByTitle indicates an expected call of GetMoviesSortedByTitle.
func (mr *MockMoviesWithActorsMockRecorder) GetMoviesSortedByTitle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoviesSortedByTitle", reflect.TypeOf((*MockMoviesWithActors)(nil).GetMoviesSortedByTitle))
}

// SearchMovieByActorName mocks base method.
func (m *MockMoviesWithActors) SearchMovieByActorName(fragment string) ([]vk_restAPI.MoviesWithActors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMovieByActorName", fragment)
	ret0, _ := ret[0].([]vk_restAPI.MoviesWithActors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovieByActorName indicates an expected call of SearchMovieByActorName.
func (mr *MockMoviesWithActorsMockRecorder) SearchMovieByActorName(fragment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovieByActorName", reflect.TypeOf((*MockMoviesWithActors)(nil).SearchMovieByActorName), fragment)
}

// SearchMoviesByTitle mocks base method.
func (m *MockMoviesWithActors) SearchMoviesByTitle(fragment string) ([]vk_restAPI.MoviesWithActors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMoviesByTitle", fragment)
	ret0, _ := ret[0].([]vk_restAPI.MoviesWithActors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMoviesByTitle indicates an expected call of SearchMoviesByTitle.
func (mr *MockMoviesWithActorsMockRecorder) SearchMoviesByTitle(fragment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMoviesByTitle", reflect.TypeOf((*MockMoviesWithActors)(nil).SearchMoviesByTitle), fragment)
}

// UpdateMovie mocks base method.
func (m *MockMoviesWithActors) UpdateMovie(movieId int, input vk_restAPI.UpdateMovies) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", movieId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockMoviesWithActorsMockRecorder) UpdateMovie(movieId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMoviesWithActors)(nil).UpdateMovie), movieId, input)
}
